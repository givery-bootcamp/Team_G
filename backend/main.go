package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"

	postv1 "backend/gen/post/v1"        // generated by protoc-gen-connect-go
	"backend/gen/post/v1/postv1connect" // generated by protoc-gen-connect-go

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type PostServer struct{}

// Connection URI
const uri = "mongodb://0.0.0.0:27017"

type Post struct {
	Title     string    `bson:"title"`
	Body      string    `bson:"body"`
	UserId    int32     `bson:"user_id"`
	Comments  []Comment `bson:"comments"`
	CreatedAt Timestamp `bson:"created_at"`
	UpdatedAt Timestamp `bson:"updated_at"`
}

type Comment struct {
	Id        int32     `bson:"id"`
	Body      string    `bson:"body"`
	UserId    int32     `bson:"user_id"`
	PostId    int32     `bson:"post_id"`
	CreatedAt Timestamp `bson:"created_at"`
	UpdatedAt Timestamp `bson:"updated_at"`
}

type Timestamp struct {
	Seconds int64 `bson:"seconds"`
	Nanos   int32 `bson:"nanos"`
}

// json か バイナリ
func (s *PostServer) Post(
	ctx context.Context,
	req *connect.Request[emptypb.Empty],
) (*connect.Response[postv1.PostResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&postv1.PostResponse{
		Post: []*postv1.PostData{
			{
				Id:        1,
				Title:     "Hello, World!",
				Body:      "This is a test post.",
				UserId:    1,
				Comments:  []*postv1.Comment{},
				CreatedAt: &timestamppb.Timestamp{},
				UpdatedAt: &timestamppb.Timestamp{},
			},
		},
	})
	return res, nil
}

func main() {
	poster := &PostServer{}
	mux := http.NewServeMux()
	path, handler := postv1connect.NewPostServiceHandler(poster)
	mux.Handle(path, handler)

	client, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(uri))

	if err != nil {
		panic(err)
	}
	defer func() {
		if err = client.Disconnect(context.TODO()); err != nil {
			panic(err)
		}
	}()

	coll := client.Database("SNS").Collection("Post")

	// filter := bson.D{{"<<fieldName>>", bson.D{{"$eq", "hoge"}}}}

	cur, err := coll.Find(context.TODO(), bson.D{{}})
	if err != nil {
		panic(err)
	}

	for cur.Next(context.TODO()) {
		var res Post
		cur.Decode(&res)
		fmt.Println(res)
	}

	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
