// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: post/v1/post.proto

package postv1connect

import (
	v1 "backend/gen/post/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PostServiceName is the fully-qualified name of the PostService service.
	PostServiceName = "post.v1.PostService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PostServicePostProcedure is the fully-qualified name of the PostService's Post RPC.
	PostServicePostProcedure = "/post.v1.PostService/Post"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	postServiceServiceDescriptor    = v1.File_post_v1_post_proto.Services().ByName("PostService")
	postServicePostMethodDescriptor = postServiceServiceDescriptor.Methods().ByName("Post")
)

// PostServiceClient is a client for the post.v1.PostService service.
type PostServiceClient interface {
	Post(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.PostResponse], error)
}

// NewPostServiceClient constructs a client for the post.v1.PostService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPostServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PostServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &postServiceClient{
		post: connect.NewClient[emptypb.Empty, v1.PostResponse](
			httpClient,
			baseURL+PostServicePostProcedure,
			connect.WithSchema(postServicePostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// postServiceClient implements PostServiceClient.
type postServiceClient struct {
	post *connect.Client[emptypb.Empty, v1.PostResponse]
}

// Post calls post.v1.PostService.Post.
func (c *postServiceClient) Post(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.PostResponse], error) {
	return c.post.CallUnary(ctx, req)
}

// PostServiceHandler is an implementation of the post.v1.PostService service.
type PostServiceHandler interface {
	Post(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.PostResponse], error)
}

// NewPostServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPostServiceHandler(svc PostServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	postServicePostHandler := connect.NewUnaryHandler(
		PostServicePostProcedure,
		svc.Post,
		connect.WithSchema(postServicePostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/post.v1.PostService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PostServicePostProcedure:
			postServicePostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPostServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPostServiceHandler struct{}

func (UnimplementedPostServiceHandler) Post(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.PostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("post.v1.PostService.Post is not implemented"))
}
