package service

import (
	"backend/domain"
	"backend/utils"
	"context"
	"log"

	postv1 "backend/gen/post/v1" // generated by protoc-gen-connect-go

	"connectrpc.com/connect"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"google.golang.org/api/oauth2/v1"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
)

type CommentServer struct{}

func (s *CommentServer) CreateComment(
	ctx context.Context,
	req *connect.Request[postv1.CreateCommentRequest],
) (*connect.Response[emptypb.Empty], error) {
	client, ok := ctx.Value(utils.ClientKey).(*mongo.Client)
	if !ok {
		log.Println("client取得エラー")
		return nil, connect.NewError(connect.CodeInternal, nil)
	}

	coll := client.Database("SNS").Collection("Post")

	// PostIDを取得
	idStr := req.Msg.PostId
	id, err := primitive.ObjectIDFromHex(idStr)
	if err != nil {
		log.Printf("ID変換エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// PostIDを用いて、Postを取得
	filter := bson.M{"_id": id}
	var result domain.Post
	err = coll.FindOne(context.TODO(), filter).Decode(&result)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, connect.NewError(connect.CodeNotFound, err)
		}
		log.Printf("ドキュメント取得エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// userIDを取得
	user, ok := ctx.Value(utils.UserKey).(*oauth2.Userinfoplus)
	if !ok {
		log.Printf("ユーザー情報がありません")
	}
	userID := user.Id

	update := bson.M{
		"$push": bson.M{
			"comments": domain.Comment{
				Id:     primitive.NewObjectID(),
				UserId: userID,
				Body:   req.Msg.Body,
				CreatedAt: domain.Timestamp{
					Seconds: timestamppb.Now().GetSeconds(),
					Nanos:   timestamppb.Now().GetNanos(),
				},
				UpdatedAt: domain.Timestamp{
					Seconds: timestamppb.Now().GetSeconds(),
					Nanos:   timestamppb.Now().GetNanos(),
				},
			},
		},
	}

	_, err = coll.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Printf("コメント追加エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	return connect.NewResponse(&emptypb.Empty{}), nil
}

func (*CommentServer) UpdateComment(
	ctx context.Context,
	req *connect.Request[postv1.UpdateCommentRequest],
) (*connect.Response[emptypb.Empty], error) {
	client, ok := ctx.Value(utils.ClientKey).(*mongo.Client)
	if !ok {
		log.Println("client取得エラー")
		return nil, connect.NewError(connect.CodeInternal, nil)
	}

	coll := client.Database("SNS").Collection("Post")

	// PostIDを取得
	idStr := req.Msg.PostId
	id, err := primitive.ObjectIDFromHex(idStr)
	if err != nil {
		log.Printf("ID変換エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// PostIDを用いて、Postを取得
	filter := bson.M{"_id": id}
	var result domain.Post
	err = coll.FindOne(context.TODO(), filter).Decode(&result)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, connect.NewError(connect.CodeNotFound, err)
		}
		log.Printf("ドキュメント取得エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// userIDを取得
	user, ok := ctx.Value(utils.UserKey).(*oauth2.Userinfoplus)
	if !ok {
		log.Printf("ユーザー情報がありません")
	}
	userID := user.Id

	// CommentIDを取得
	commentIDStr := req.Msg.CommentId
	commentID, err := primitive.ObjectIDFromHex(commentIDStr)
	if err != nil {
		log.Printf("ID変換エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// CommentIDを用いて、Commentを取得
	var comment domain.Comment
	for _, c := range result.Comments {
		if c.Id == commentID {
			comment = c
			break
		}
	}

	// Commentが見つからなかった場合
	if comment.Id.IsZero() {
		log.Printf("コメントが見つかりません")
		return nil, connect.NewError(connect.CodeNotFound, err)
	}

	// CommentのUserIDとリクエストユーザーのUserIDが一致しない場合
	if comment.UserId != userID {
		log.Printf("コメント更新権限がありません")
		return nil, connect.NewError(connect.CodePermissionDenied, err)
	}

	update := bson.M{
		"$set": bson.M{
			"comments.$[elem].body":       req.Msg.Body,
			"comments.$[elem].updated_at": domain.Timestamp{Seconds: timestamppb.Now().GetSeconds(), Nanos: timestamppb.Now().GetNanos()},
		},
	}

	arrayFilters := options.ArrayFilters{
		Filters: []interface{}{bson.M{"elem._id": commentID}},
	}

	_, err = coll.UpdateOne(
		context.TODO(),
		filter,
		update,
		&options.UpdateOptions{ArrayFilters: &arrayFilters},
	)

	if err != nil {
		log.Printf("コメント更新エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	return connect.NewResponse(&emptypb.Empty{}), nil
}

func (s *CommentServer) DeleteComment(
	ctx context.Context,
	req *connect.Request[postv1.DeleteCommentRequest],
) (*connect.Response[emptypb.Empty], error) {
	client, ok := ctx.Value(utils.ClientKey).(*mongo.Client)
	if !ok {
		log.Println("client取得エラー")
		return nil, connect.NewError(connect.CodeInternal, nil)
	}

	coll := client.Database("SNS").Collection("Post")

	// PostIDを取得
	idStr := req.Msg.PostId
	id, err := primitive.ObjectIDFromHex(idStr)
	if err != nil {
		log.Printf("ID変換エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// PostIDを用いて、Postを取得
	filter := bson.M{"_id": id}
	var result domain.Post
	err = coll.FindOne(context.TODO(), filter).Decode(&result)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, connect.NewError(connect.CodeNotFound, err)
		}
		log.Printf("ドキュメント取得エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// userIDを取得
	user, ok := ctx.Value(utils.UserKey).(*oauth2.Userinfoplus)
	if !ok {
		log.Printf("ユーザー情報がありません")
	}
	userID := user.Id

	// CommentIDを取得
	commentIDStr := req.Msg.CommentId
	commentID, err := primitive.ObjectIDFromHex(commentIDStr)
	if err != nil {
		log.Printf("ID変換エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	// CommentIDを用いて、Commentを取得
	var comment domain.Comment
	var count int
	for i, c := range result.Comments {
		if c.Id == commentID {
			comment = c
			count = i
			break
		}
	}

	// Commentが見つからなかった場合
	if comment.Id.IsZero() {
		log.Printf("コメントが見つかりません")
		return nil, connect.NewError(connect.CodeNotFound, err)
	}

	// CommentのUserIDとリクエストユーザーのUserIDが一致しない場合
	if comment.UserId != userID {
		log.Printf("コメント更新権限がありません")
		return nil, connect.NewError(connect.CodePermissionDenied, err)
	}

	// TODO: Transaction
	// 対象のコメント削除
	result.Comments = append(result.Comments[:count], result.Comments[count+1:]...)

	update := bson.M{
		"$set": bson.M{
			"comments": result.Comments,
		},
	}

	_, err = coll.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Printf("コメント削除エラー: %v", err)
		return nil, connect.NewError(connect.CodeInternal, err)
	}

	return connect.NewResponse(&emptypb.Empty{}), nil
}
