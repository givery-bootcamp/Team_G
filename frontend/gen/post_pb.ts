// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file post.proto (package post.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * コメント作成APIのリクエスト
 *
 * @generated from message post.v1.CreateCommentRequest
 */
export class CreateCommentRequest extends Message<CreateCommentRequest> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  /**
   * @generated from field: string post_id = 2;
   */
  postId = "";

  constructor(data?: PartialMessage<CreateCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.CreateCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "post_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCommentRequest {
    return new CreateCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCommentRequest {
    return new CreateCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCommentRequest {
    return new CreateCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCommentRequest | PlainMessage<CreateCommentRequest> | undefined, b: CreateCommentRequest | PlainMessage<CreateCommentRequest> | undefined): boolean {
    return proto3.util.equals(CreateCommentRequest, a, b);
  }
}

/**
 * コメント更新APIのリクエスト
 *
 * @generated from message post.v1.UpdateCommentRequest
 */
export class UpdateCommentRequest extends Message<UpdateCommentRequest> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  /**
   * @generated from field: string post_id = 2;
   */
  postId = "";

  /**
   * @generated from field: string comment_id = 3;
   */
  commentId = "";

  constructor(data?: PartialMessage<UpdateCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.UpdateCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "post_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCommentRequest {
    return new UpdateCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCommentRequest {
    return new UpdateCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCommentRequest {
    return new UpdateCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCommentRequest | PlainMessage<UpdateCommentRequest> | undefined, b: UpdateCommentRequest | PlainMessage<UpdateCommentRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCommentRequest, a, b);
  }
}

/**
 * @generated from message post.v1.DeleteCommentRequest
 */
export class DeleteCommentRequest extends Message<DeleteCommentRequest> {
  /**
   * @generated from field: string post_id = 1;
   */
  postId = "";

  /**
   * @generated from field: string comment_id = 2;
   */
  commentId = "";

  constructor(data?: PartialMessage<DeleteCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.DeleteCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "post_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "comment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCommentRequest {
    return new DeleteCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCommentRequest {
    return new DeleteCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCommentRequest {
    return new DeleteCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCommentRequest | PlainMessage<DeleteCommentRequest> | undefined, b: DeleteCommentRequest | PlainMessage<DeleteCommentRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCommentRequest, a, b);
  }
}

/**
 * Post一覧APIのレスポンス
 *
 * @generated from message post.v1.PostListResponse
 */
export class PostListResponse extends Message<PostListResponse> {
  /**
   * @generated from field: repeated post.v1.PostData post = 1;
   */
  post: PostData[] = [];

  constructor(data?: PartialMessage<PostListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.PostListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "post", kind: "message", T: PostData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostListResponse {
    return new PostListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostListResponse {
    return new PostListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostListResponse {
    return new PostListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostListResponse | PlainMessage<PostListResponse> | undefined, b: PostListResponse | PlainMessage<PostListResponse> | undefined): boolean {
    return proto3.util.equals(PostListResponse, a, b);
  }
}

/**
 * Post詳細APIのリクエスト
 *
 * @generated from message post.v1.PostRequest
 */
export class PostRequest extends Message<PostRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<PostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.PostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostRequest {
    return new PostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostRequest {
    return new PostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostRequest {
    return new PostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostRequest | PlainMessage<PostRequest> | undefined, b: PostRequest | PlainMessage<PostRequest> | undefined): boolean {
    return proto3.util.equals(PostRequest, a, b);
  }
}

/**
 * Post詳細APIのレスポンス
 *
 * @generated from message post.v1.PostResponse
 */
export class PostResponse extends Message<PostResponse> {
  /**
   * @generated from field: post.v1.PostData post = 1;
   */
  post?: PostData;

  constructor(data?: PartialMessage<PostResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.PostResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "post", kind: "message", T: PostData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostResponse {
    return new PostResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostResponse {
    return new PostResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostResponse {
    return new PostResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostResponse | PlainMessage<PostResponse> | undefined, b: PostResponse | PlainMessage<PostResponse> | undefined): boolean {
    return proto3.util.equals(PostResponse, a, b);
  }
}

/**
 * Post作成APIのリクエスト
 *
 * @generated from message post.v1.CreatePostRequest
 */
export class CreatePostRequest extends Message<CreatePostRequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * @generated from field: string image_url = 3;
   */
  imageUrl = "";

  constructor(data?: PartialMessage<CreatePostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.CreatePostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePostRequest {
    return new CreatePostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePostRequest {
    return new CreatePostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePostRequest {
    return new CreatePostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePostRequest | PlainMessage<CreatePostRequest> | undefined, b: CreatePostRequest | PlainMessage<CreatePostRequest> | undefined): boolean {
    return proto3.util.equals(CreatePostRequest, a, b);
  }
}

/**
 * Post更新APIのリクエスト
 *
 * @generated from message post.v1.UpdatePostRequest
 */
export class UpdatePostRequest extends Message<UpdatePostRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string body = 3;
   */
  body = "";

  /**
   * @generated from field: string image_url = 4;
   */
  imageUrl = "";

  constructor(data?: PartialMessage<UpdatePostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.UpdatePostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePostRequest {
    return new UpdatePostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePostRequest {
    return new UpdatePostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePostRequest {
    return new UpdatePostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePostRequest | PlainMessage<UpdatePostRequest> | undefined, b: UpdatePostRequest | PlainMessage<UpdatePostRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePostRequest, a, b);
  }
}

/**
 * @generated from message post.v1.DeletePostRequest
 */
export class DeletePostRequest extends Message<DeletePostRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeletePostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.DeletePostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePostRequest {
    return new DeletePostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePostRequest {
    return new DeletePostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePostRequest {
    return new DeletePostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePostRequest | PlainMessage<DeletePostRequest> | undefined, b: DeletePostRequest | PlainMessage<DeletePostRequest> | undefined): boolean {
    return proto3.util.equals(DeletePostRequest, a, b);
  }
}

/**
 * Postデータ
 * 詳細
 *  id: 投稿ID
 *  title: タイトル
 *  body: 本文
 *  user_id: ユーザID
 *  comments: コメント配列
 *  image_url: 画像URL
 *  created_at: 作成日時
 *  updated_at: 更新日時
 *
 * @generated from message post.v1.PostData
 */
export class PostData extends Message<PostData> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string body = 3;
   */
  body = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: string image_url = 5;
   */
  imageUrl = "";

  /**
   * @generated from field: repeated post.v1.Comment comments = 6;
   */
  comments: Comment[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<PostData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.PostData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "comments", kind: "message", T: Comment, repeated: true },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostData {
    return new PostData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostData {
    return new PostData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostData {
    return new PostData().fromJsonString(jsonString, options);
  }

  static equals(a: PostData | PlainMessage<PostData> | undefined, b: PostData | PlainMessage<PostData> | undefined): boolean {
    return proto3.util.equals(PostData, a, b);
  }
}

/**
 * コメントデータ
 * 詳細
 *  id: コメントID
 *  body: コメント本文
 *  user_id: ユーザID
 *  post_id: 投稿ID
 *  created_at: 作成日時
 *  updated_at: 更新日時
 *
 * @generated from message post.v1.Comment
 */
export class Comment extends Message<Comment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: string post_id = 4;
   */
  postId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Comment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "post.v1.Comment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "post_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment {
    return new Comment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJsonString(jsonString, options);
  }

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean {
    return proto3.util.equals(Comment, a, b);
  }
}

